// <auto-generated />
using System;
using Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FakeFetch.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailQueueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Create_On")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailQueueId")
                        .HasColumnType("int");

                    b.Property<string>("IsoLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modified_By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modified_On")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sent")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XmlDataId")
                        .HasColumnType("int");

                    b.Property<string>("XslName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("XmlDataId")
                        .IsUnique();

                    b.ToTable("EmailQueueItem", (string)null);
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("XmlData");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Login", b =>
                {
                    b.HasBaseType("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Login", (string)null);
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Overdue", b =>
                {
                    b.HasBaseType("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverdueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Overdue", (string)null);
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Report", b =>
                {
                    b.HasBaseType("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData");

                    b.Property<string>("PortalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.User", b =>
                {
                    b.HasBaseType("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailQueueItem", b =>
                {
                    b.HasOne("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", "XmlData")
                        .WithOne("EmailQueueItem")
                        .HasForeignKey("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailQueueItem", "XmlDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("XmlData");
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Login", b =>
                {
                    b.HasOne("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", null)
                        .WithOne()
                        .HasForeignKey("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Login", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Overdue", b =>
                {
                    b.HasOne("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", null)
                        .WithOne()
                        .HasForeignKey("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Overdue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Report", b =>
                {
                    b.HasOne("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", null)
                        .WithOne()
                        .HasForeignKey("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.User", b =>
                {
                    b.HasOne("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", null)
                        .WithOne()
                        .HasForeignKey("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.EmailTemplates.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecmanage.eProcessor.Services.FakeFetch.FakeFetch.Domain.Entities.XmlData", b =>
                {
                    b.Navigation("EmailQueueItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
